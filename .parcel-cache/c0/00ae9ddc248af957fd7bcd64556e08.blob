var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _iconsSvg = require("url:../../img/icons.svg");
var _iconsSvgDefault = parcelHelpers.interopDefault(_iconsSvg);
var _fractional = require("fractional");
class RecipeView {
    #parentElement = document.querySelector('.recipe');
    #data;
    #errorMessage = "We could't find the recipe.Please try another one!";
    #message = '';
    render(data) {
        this.#data = data;
        const markup = this.#generateMarkup();
        this.#parentElement.innerHTML = '';
        this.#parentElement.insertAdjacentHTML('afterbegin', markup);
    }
    addHandlerRender(selectHandler) {
        [
            'hashchange',
            'load'
        ].forEach((eve)=>window.addEventListener(eve, selectHandler)
        );
    }
     #clearParentElement() {
        this.#parentElement.innerHTML = '';
    }
    renderError(message = this.#errorMessage) {
        const markup = `\n    <div class="error">\n            <div>\n              <svg>\n                <use href="${_iconsSvgDefault.default}#icon-alert-triangle"></use>\n              </svg>\n            </div>\n            <p>${message}</p>\n    </div> `;
        this.#clearParentElement();
        this.#parentElement.insertAdjacentHTML('afterbegin', markup);
    }
    renderMessage(message = this.#message) {
        const markup = `\n    <div class="message">\n            <div>\n              <svg>\n                <use href="${_iconsSvgDefault.default}#icon-smile"></use>\n              </svg>\n            </div>\n            <p>${message}</p>\n    </div> `;
        this.#clearParentElement();
        this.#parentElement.insertAdjacentHTML('afterbegin', markup);
    }
    renderSpinner() {
        const markup = `\n        <div class="spinner">\n          <svg>\n            <use href="${_iconsSvgDefault.default}#icon-loader"></use>\n          </svg>\n        </div> \n\n  `;
        this.#clearParentElement();
        this.#parentElement.insertAdjacentHTML('afterbegin', markup);
    }
     #generateMarkup() {
        return `\n   \n\n     <figure class="recipe__fig">\n          <img src="${this.#data.imageUrl}" alt="${this.#data.title}" class="recipe__img" />\n          <h1 class="recipe__title">\n            <span>${this.#data.title}</span>\n          </h1>\n        </figure>\n\n        <div class="recipe__details">\n          <div class="recipe__info">\n            <svg class="recipe__info-icon">\n              <use href="${_iconsSvgDefault.default}#icon-clock"></use>\n            </svg>\n            <span class="recipe__info-data recipe__info-data--minutes">45</span>\n            <span class="recipe__info-text">minutes</span>\n          </div>\n          <div class="recipe__info">\n            <svg class="recipe__info-icon">\n              <use href="${_iconsSvgDefault.default}#icon-users"></use>\n            </svg>\n            <span class="recipe__info-data recipe__info-data--people">${this.#data.servings}</span>\n            <span class="recipe__info-text">servings</span>\n\n            <div class="recipe__info-buttons">\n              <button class="btn--tiny btn--increase-servings">\n                <svg>\n                  <use href="${_iconsSvgDefault.default}#icon-minus-circle"></use>\n                </svg>\n              </button>\n              <button class="btn--tiny btn--increase-servings">\n                <svg>\n                  <use href="${_iconsSvgDefault.default}#icon-plus-circle"></use>\n                </svg>\n              </button>\n            </div>\n          </div>\n\n          <div class="recipe__user-generated">\n            <svg>\n              <use href="${_iconsSvgDefault.default}#icon-user"></use>\n            </svg>\n          </div>\n          <button class="btn--round">\n            <svg class="">\n              <use href="${_iconsSvgDefault.default}#icon-bookmark-fill"></use>\n            </svg>\n          </button>\n        </div>\n\n        <div class="recipe__ingredients">\n          <h2 class="heading--2">Recipe ingredients</h2>\n          <ul class="recipe__ingredient-list">\n          ${this.#data.ingredients.map((ing)=>this.#generateIntergredientMarkup(ing)
        ).join('')}\n            \n\n           \n          </ul>\n        </div>\n\n        <div class="recipe__directions">\n          <h2 class="heading--2">How to cook it</h2>\n          <p class="recipe__directions-text">\n            This recipe was carefully designed and tested by\n            <span class="recipe__publisher">${this.#data.publisher}</span>. Please check out\n            directions at their website.\n          </p>\n          <a\n            class="btn--small recipe__btn"\n            href="${this.#data.soureUrl}"\n            target="_blank"\n          >\n            <span>Directions</span>\n            <svg class="search__icon">\n              <use href="${_iconsSvgDefault.default}#icon-arrow-right"></use>\n            </svg>\n          </a>\n        </div>`;
    }
     #generateIntergredientMarkup(ingredient) {
        return `<li class="recipe__ingredient">\n                <svg class="recipe__icon">\n                  <use href="${_iconsSvgDefault.default}#icon-check"></use>\n                </svg>\n                <div class="recipe__quantity">${ingredient.quantity ? new _fractional.Fraction(ingredient.quantity).toString() : ''}</div>\n                <div class="recipe__description">\n                  <span class="recipe__unit">${ingredient.unit}</span>\n                  ${ingredient.description}\n                </div>\n            </li>`;
    }
     #renderSearchResults(data) {
        const markup = `\n    ${data.map((recipe)=>{
            return `\n            <li class="preview">\n                <a class="preview__link preview__link--active" href="#23456">\n                  <figure class="preview__fig">\n                    <img src="${recipe.image_url}" alt="${recipe.title}" />\n                  </figure>\n                  <div class="preview__data">\n                    <h4 class="preview__title">${recipe.title}</h4>\n                    <p class="preview__publisher">${recipe.publisher}</p>\n                    <div class="preview__user-generated">\n                      <svg>\n                        <use href="${_iconsSvgDefault.default}#icon-user"></use>\n                      </svg>\n                    </div>\n                  </div>\n                </a>\n             </li>\n      `;
        })};\n    `;
        results.insertAdjacentHTML('afterbegin', markup);
    }
}
exports.default = new RecipeView();
